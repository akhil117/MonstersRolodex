{"version":3,"sources":["logo.svg","components/search/searchbox.component.jsx","components/card/cardcomponet.jsx","components/CardList/cardlist.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","placeholder","handlechange","type","onChange","Card","props","className","alt","src","monster","id","name","size","email","CardList","console","log","monsters","map","key","App","handleChange","e","setState","search","target","value","state","axios","res","this","data","filterMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAAAA,EAAOC,QAAU,IAA0B,kC,6NCI7BC,G,MAAS,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAEjC,OACA,2BAAQC,KAAK,SAASF,YAAaA,EAAaG,SAAYF,MCHnDG,G,YAAO,SAAAC,GAEhB,OACA,yBAAKC,UAAU,aACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,wBAAIC,MAAI,GAAEP,EAAMI,QAAQI,UCLnBC,EAAW,SAACT,GAGrB,OADAU,QAAQC,IAAIX,GAGR,yBAAKC,UAAU,aAAaD,EAAMY,SAASC,KAAI,SAAAT,GAAO,OAAI,kBAAC,EAAD,CAAMU,IAAOV,EAAQC,GAAID,QAAWA,SCsCvFW,E,YAtCb,aAAc,IAAD,8BACX,+CAcHC,aAAe,SAACC,GACT,EAAKC,SAAS,CAACC,OAAOF,EAAEG,OAAOC,SAdnC,EAAKC,MAAQ,CACXV,SAAS,GACTO,OAAQ,IAJC,E,iNASOI,IAAM,8C,OAAlBC,E,OACNC,KAAKP,SAAS,CAACN,SAASY,EAAIE,O,qIASnB,IAAD,EAEoBD,KAAKH,MAAxBV,EAFD,EAECA,SAASO,EAFV,EAEUA,OACVQ,EAAiBf,EAASgB,QAAO,SAAAxB,GAAO,OAAIA,EAAQE,KAAKuB,cAAcC,SAASX,EAAOU,kBAG3F,OADFnB,QAAQC,IAAIgB,GAER,yBAAK1B,UAAU,OACf,wBAAIA,UAAU,QAAd,oBACA,kBAAC,EAAD,CAASN,YAAY,kBAAkBC,aAAe6B,KAAKT,eAC3D,kBAAC,EAAD,CAAUJ,SAAYe,S,GA/BdI,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9bfcf6d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\nimport './searchbox.css'\n\n\nexport const  Search = ({placeholder,handlechange}) => {\n\n    return(\n    <input  type=\"search\" placeholder={placeholder} onChange = {handlechange}/> \n    );\n\n  \n}","import React from 'react'\nimport './card-container.css'\n\n\nexport const Card = props =>{\n\n    return (\n    <div className='card-cont'>\n        <img alt=\"monster\" src ={`https://robohash.org/${props.monster.id}?set=set2&size=160x160`}></img>\n        <h1>{props.monster.name}</h1>\n        <h2 size>{props.monster.email}</h2>\n    </div>);\n}","import React from 'react'\nimport './card.css'\nimport { Card } from '../card/cardcomponet'\n\n\nexport const CardList = (props)=>{\n\n    console.log(props);\n    return(\n\n        <div className='cardLists'>{props.monsters.map(monster => <Card key = {monster.id} monster = {monster}/>)}</div>\n    );\n\n}","import React ,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport './components/search/searchbox.css'\nimport {Search} from './components/search/searchbox.component'\nimport './components/CardList/card.css'\nimport {CardList} from './components/CardList/cardlist.component';\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      monsters:[],\n      search: \"\"\n    };\n  }\n  async componentDidMount()\n  {\n    const res = await axios('https://jsonplaceholder.typicode.com/users');\n    this.setState({monsters:res.data});\n    \n\n  }\n\n handleChange = (e) => {\n        this.setState({search:e.target.value})\n  }\n\n    render(){\n\n      const {monsters,search} = this.state;\n      const filterMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(search.toLowerCase()));\n\n      console.log(filterMonsters);\n        return (\n          <div className='App'>  \n          <h1 className='Head'>Monster Rolodex </h1>\n          <Search  placeholder='Search Monsters' handlechange ={this.handleChange} /> \n          <CardList monsters = {filterMonsters}> \n            </CardList>\n\n            </div>\n          );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}